#!/usr/bin/env python
# -*- coding: utf-8 -*-

# BeautifulSoup to sxml

from BeautifulSoup import BeautifulSoup
from BeautifulSoup import NavigableString
from BeautifulSoup import Tag
from BeautifulSoup import Comment
from BeautifulSoup import Declaration
from BeautifulSoup import CData
from BeautifulSoup import ProcessingInstruction
import codecs
import sys
import re
import os.path
from xml.etree.ElementTree import Element, SubElement, tostring

# TODO get terminal information
DEFAULT_OUTPUT_ENCODING="utf-8"

sys.stdout = codecs.getwriter(DEFAULT_OUTPUT_ENCODING)(sys.stdout)

def constructXml(soup):

    root = findRootNode(soup) or soup;

    if root.name  == soup.ROOT_TAG_NAME:
        name = "html";
    else:
        name = root.name;

    top = Element(name);
    top.attrib = constructAttrs(root);

    appendChildren(top, root);

    return top;

def findRootNode(obj):
    if isinstance(obj, Tag):
        # html node as a root
        if obj.name == "html":
            return obj;

        for o in obj:
            root = findRootNode(o);

            if root:
                return root;
    else:
        return None;

def appendChildren(xparen, sNode):
    for s in sNode:
        if isinstance(s, NavigableString):
            # TODO
            xparen.text = s;
        elif isinstance(s, Tag):
            constructNode(xparen, s);
        else:
            pass;

def constructAttrs(sNode):
    res = {};

    for k,v in sNode.attrs:
        if isinstance(v, basestring):
            if sNode.containsSubstitutions and '%SOUP-ENCODING%' in v:
                v = sNode.substituteEncoding(v, DEFAULT_OUTPUT_ENCODING)

        # Check invalid attribute name
        if not re.compile("^[-a-zA-Z0-9]+$").search(k):
            v = "%s=%s" % (k, v);
            k = "unknown"

        # TODO: reconsider it. 
        # ignore all namespace..
        if re.compile("^xmlns").search(k):
            continue;

        res[k] = v;

    return res;

def constructNode(xparenNode, sNode):
    attr = constructAttrs(sNode);
    ele = SubElement(xparenNode, sNode.name, attr);

    appendChildren(ele, sNode);

if len(sys.argv) < 1 or 2 < len(sys.argv):
    exit(1);

if len(sys.argv) == 2:
    file=sys.argv[1];

    if not os.path.isfile(file):
        print "Error: %s is not exists" % (file);
        exit (1);

    fd=open(file);
else:
    fd = sys.stdin;

soup = BeautifulSoup(fd);

# To print soup as xml
xml = constructXml(soup);

text = tostring(xml, DEFAULT_OUTPUT_ENCODING);

print unicode(text, encoding=DEFAULT_OUTPUT_ENCODING);

